---
title: "Take Home Exercise 1"
subtitle: " Visual Analytics of the demographic and financial characteristics of residents in City of Engagement"
author: "Oh Jia Wen"
date: "TBC"
date-modified: "TBC"
execute: 
  warning: false
---

# 1. OVERVIEW

City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received. 

## 1.1 The Task

In this take-home exercise, you are required to apply the concepts and methods you had learned in Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement, using appropriate **static and interactive statistical graphics** methods. 

# 2. Data Source

# 3. Data Preparation

## 3.1 Install R-packages

Using p_load() of pacman package to load the required libraries

```{r}
pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) 
```

## 3.2 Import Data

### 3.2.1 Import participants dataset

```{r}
participants <- read_csv("data/Participants.csv")
```

### 3.2.2 Load participants data table

#### Participants Data Table

```{r}
head(participants)
```

### 3.2.3 Import Financial Journal dataset

```{r}
financial_journal <- read_csv("data/FinancialJournal.csv")
```

### 3.2.4 Load Financial Journal data table

#### Financial Journal Data Table

```{r}
head(financial_journal)
```

## 3.3 Data Wrangling

As seen from the two data tables, there are inaccurate data types. Code with mutate from dplyr to reformat participantID from dbl to chr. groupby participantID remove duplicates reformat timestamp to year and month create new variables for income, expenses, cashflow

The function distinct() \[dplyr package\] can be used to keep only unique/distinct rows from a data frame.

#### participants Data Table

```{r}
#change data type of participantID from dbl to char 
participants %>%
  mutate(participantId = as.character(participantId))
financial_journal %>%
  mutate(participantId = as.character(participantId))
```

```{r}
unique(financial_journal$category)
```

```{r}
min(participants$age)
max(participants$age)

#reformat age group 
age_group <- factor(ifelse(participants$age < 20, "Under 20",
                ifelse(participants$age < 30, "20-29",
                    ifelse(participants$age < 40, "30-39",
                      ifelse(participants$age < 50, "40-49", "Above 50")))),
                levels = c("Under 20", "20-29", "30-39", "40-49", "Above 50"),
                ordered= TRUE)

#reformat education level
participants$educationLevel <- factor(participants$educationLevel, 
                                      levels = c("Low", "Graduate", "Bachelors",
                                                 "HighSchoolOrCollege"), 
                                      ordered = TRUE)

participants %>%
    mutate(age_group,.after=age)

```

You can use group_by() function along with the summarise() from dplyr package to find the group by sum in R DataFrame, group_by() returns the grouped_df ( A grouped Data Frame) and use summarise() on grouped df results to get the group by sum.

```{r}
#store new dataset in variable ->  financial_journal_clean
financial_journal_clean <- financial_journal %>%
  
#reformat timestamp to Year and Month
  mutate(year = as.integer(format(as.Date(paste(financial_journal$timestamp, "-01", sep="")), "%Y")),
         month = as.integer(format(as.Date(paste(financial_journal$timestamp, "-01", sep="")), "%m")),
         .before = 3) 
  
#create new variables called 
 
financial_journal_clean
```

```{r}
grouped_data <- financial_journal_clean %>%
  group_by(participantId,year,month, category) %>%
  summarize(total_amount = sum(amount))

grouped_data
```

The function distinct() \[dplyr package\] can be used to keep only unique/distinct rows from a data frame. If there are duplicate rows, only the first row is preserved.

```{r}
financial_journal_clean %>% distinct()
participants_clean <- participants 
participants_clean %>% distinct()
grouped_data %>% distinct()
```

Check for missing values

```{r}
#Check for missing values
any(is.na(participants_clean))
any(is.na(financial_journal_clean))
```

# 4. Demographics Insights

```{r}
p1 <- ggplot(data=participants, 
       aes(x = age_group)) +
      geom_bar_interactive() +
      ggtitle("Age group of residents ") +
      theme(plot.title = element_text(hjust = 0.5))
```

```{r}
p2 <- ggplot(data=participants, 
       aes(x = educationLevel)) +
      geom_bar_interactive() +
      ggtitle("Education level of residents ") +
      theme(plot.title = element_text(hjust = 0.5))

```

```{r}
p3 <- ggplot(data=participants, 
       aes(x = interestGroup)) +
      geom_bar_interactive() +
      ggtitle("Interest group of residents ") +
      theme(plot.title = element_text(hjust = 0.5))
```

```{r}
     girafe(code = print((p1 + p2) / p3), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
            )
          ) 

```

# 5. Financial Health Insights
