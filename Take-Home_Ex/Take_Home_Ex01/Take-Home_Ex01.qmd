---
title: "Take Home Exercise 1"
subtitle: " Visual Analytics of the demographic and financial characteristics of residents in City of Engagement"
author: "Oh Jia Wen"
date: "5/6/2023"
date-modified: "5/6/2023"
code-fold: false
execute: 
#  echo: true
#  eval: true
  warning: false
---

# 1. OVERVIEW

City of Engagement is a small city located at Country of Nowhere, with a total population of 50,000, serving as an agriculture region. The local council of the city is in the midst of preparing the Local Plan 2023. 

## 1.1 The Task

In this take-home exercise, you are required to apply the concepts and methods you had learned in Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement, using appropriate **static and interactive statistical graphics** methods.

# 2. Data Source

Data has been collected by the local council of the city. The survey sampled 1,000 respondents to collect data related to their household demographic, spending patterns and among, other things. The data is stored in two separate files:

1.  Participants.csv *(Participants' Profile)*

    -   1,011 rows

    -   7 variables

2.  FinancialJournal.csv *(Financial Health of Participants)*

    -   1,513,636 rows

    -   4 variables

    -   From Mar 2022 to Feb 2023.

#3. Data Preparation

## 3.1 Install R-packages

Using p_load() of pacman package to load the required libraries

```{r}
pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse,knitr,scales,ggstatsplot,paletteer,wesanderson,ggpubr)
options(scipen = 999)
```

## 3.2 Import Data

### 3.2.1 Import participants dataset

```{r}
participants <- read_csv("data/Participants.csv")
```
### 3.2.2 Load participants

::: panel-tabset
## Data Table

```{r}
#| echo: false
head(participants)
```

## Code

```{r}
#| eval: false
head(participants)
```
:::

### 3.2.3 Import Financial Journal dataset

```{r}
financial_journal <- read_csv("data/FinancialJournal.csv")
```

### 3.2.4 Load Financial Journal

::: panel-tabset
#### Data Table

```{r}
#| echo: false
head(financial_journal)
```

#### Code

```{r}
#| eval: false
head(financial_journal)
```
:::

## 3.3 Data Wrangling

As seen from the two data tables above, there are several quality issues. 
1) for Participants.csv 

Inaccurate data types. 
 - participantID is in `dbl` instead of `chr`
 -timestamp format is in `POSIX` instead of `chr` 
 - householdSize is in `dbl`. We will convert it to `ord`. 
 -reformat age group after looking at the min and max
 - round up jovality to 2 d.p. 
 
Code with mutate from dplyr to reformat participantID from dbl to chr. 
Check for duplicates(remove 1,113 rows)

groupby participantID remove duplicates reformat timestamp to year and month create new variables for income, expenses, cashflow

The function distinct() \[dplyr package\] can be used to keep only unique/distinct rows from a data frame.

```{r}
unique(financial_journal$category)
```

```{r}
#create new dataset 
participants_new <- participants %>%
    mutate(
          participantId = as.character(participantId),
          #binned joviality to 5-class variables 
          joviality_bins = cut(joviality, breaks = c(0.0,0.2,0.4,0.6,0.8,1.0))
          )

#reformat householdSize to Ordinal 
    participants_new$householdSize <- factor(participants$householdSize,
                                      levels = c("1", "2", "3"), 
                                      ordered = TRUE) 
#reformat age group 
participants_new$age_group <- factor(ifelse(participants$age < 20, "Under 20",
                ifelse(participants$age < 30, "20-29",
                    ifelse(participants$age < 40, "30-39",
                      ifelse(participants$age < 50, "40-49", "Above 50")))),
                levels = c("Under 20", "20-29", "30-39", "40-49", "Above 50"),
                ordered= TRUE)

#reformat education level to Ordinal 
participants_new$educationLevel <- factor(participants$educationLevel, 
                                      levels = c("Low", "HighSchoolOrCollege", 
                                                 "Bachelors", "Graduate"
                                                 ), 
                                      ordered = TRUE)  

#round up joviality to 2 decimal places 
participants_new$joviality <- round(participants$joviality, 2) 
  
participants_new

```

```{r}
#check min and max age of residents in COE. 
min(participants$age)
max(participants$age)

```

```{r}
#remove duplicate rows for all columns
financial_journal_lessdup <- financial_journal %>% 
  distinct()

```

You can use group_by() function along with the summarise() from dplyr package to find the group by sum in R DataFrame, group_by() returns the grouped_df ( A grouped Data Frame) and use summarise() on grouped df results to get the group by sum.

scales package (part of the Tidyverse) does exactly this:

```{r}
#| code-fold: true
#create new dataset 
grouped_data <- financial_journal_lessdup %>%
  
#recode ID from dbl to chr, year_mth
    mutate(participantId = as.character(participantId),
         year_mth = format(as.Date(financial_journal_lessdup$timestamp), "%Y-%m"),
         amount = abs(round(amount,2)),
         .before = 3) %>%
  
#group the columns in the following order 
  group_by(participantId,year_mth, category) %>%
  summarize(total_amount = sum(amount)) 

# Pivot the data frame to have categories as columns
pivoted_fj <- grouped_data %>%
  pivot_wider(names_from = "category", values_from = "total_amount", values_fill = 0)

# Add a new column with mixed categories
pivoted_fj$Expenses <- pivoted_fj$Education + pivoted_fj$Food + pivoted_fj$Recreation + pivoted_fj$Shelter +pivoted_fj$RentAdjustment
pivoted_fj$Income <- pivoted_fj$Wage
pivoted_fj$Cashflow <- pivoted_fj$Income - pivoted_fj$Expenses
pivoted_fj$Shelter <- pivoted_fj$Shelter + pivoted_fj$RentAdjustment

# Output the pivoted data frame
pivoted_fj
```

The function distinct() \[dplyr package\] can be used to keep only unique/distinct rows from a data frame. If there are duplicate rows, only the first row is preserved.

```{r}
colSums(pivoted_fj[-1] !=0)
```

Check for missing values

```{r}
#Check for missing values
any(is.na(participants_new))
any(is.na(pivoted_fj))
```

### Merge Data Table

```{r}
#| code-fold: true
#| 
#join both data sets 
resident_profile <- full_join(participants_new, pivoted_fj, 
                       by = c("participantId" = "participantId")) %>%
#relocate columns to the front (by importance)
                    relocate(year_mth, .after =participantId) %>%
                    relocate(Cashflow, .after = year_mth) %>%
                    relocate(age_group, .after = Cashflow) %>%
                    relocate(educationLevel, .after = age_group) %>%
                    relocate(Income, .after = haveKids) %>%
                    relocate(Expenses , .after = Income) 
resident_profile %>%
    select(c(1:18))
```

```{r}
kable(head(resident_profile), "simple")
```

# 4. Demographics Insights

```{r Overview of Demographics , fig.width=12,fig.height=6}

#| code-fold: true

#Bar chart for resident's age distribution
p1 <- ggplot(data= participants_new,
      aes(x = age_group)) +
      geom_bar() +
      xlab("Age Group") +
      ylab("No.of\nResidents") +
      ylim(0,300) +
      geom_text(aes(label = paste(..count..,",", scales::percent(..count../sum(..count..),accuracy = 0.01))), 
      stat= "count", vjust = -0.5) 

#Bar chart for resident's household size distribution
p2 <- ggplot(data= participants_new,
      aes(x = householdSize)) +
      geom_bar() +
      xlab("Size of Household") +
      ylab("No.of\nResidents") +
      ylim(0,400) +
      geom_text(aes(label = paste(..count..,",", scales::percent(..count../sum(..count..),accuracy = 0.01))), 
      stat= "count", vjust = -0.5) 


#Bar chart for resident's education level
p3 <- ggplot(data= participants_new,
      aes(x = educationLevel)) +
      geom_bar() +
      xlab("Education Level") +
      ylab("No.of\nResidents") +
      ylim(0,600) +
      geom_text(aes(label = paste(..count..,",", scales::percent(..count../sum(..count..),accuracy = 0.01))), 
      stat= "count", vjust = -0.5) 

#Bar chart to visualize if residents have kids 
p4 <- ggplot(data= participants_new,
      aes(x = haveKids)) +
      geom_bar() +
      ylab("No.of\nResidents") +
      ylim(0,850) +
      geom_text(aes(label = paste(..count..,",", scales::percent(..count../sum(..count..),accuracy = 0.01))), 
      stat= "count", vjust = -0.5) 

#Bar chart for resident's joviality 
#MISSING THE TEXT ABOVE 

p5 <- ggplot(data= participants_new,
      aes(x = joviality)) +
      geom_histogram(bins=10, color="black",      
                 fill= "grey25") +
      xlab("Joviality Level") +
      ylab("No.of\nResidents") 

#Bar chart for residents' interest group 
p6 <- ggplot(data= participants_new,
      aes(x = interestGroup)) +
      geom_bar() +
      xlab("Interest Group") +
      ylab("No.of\nResidents") +
      ylim(0,150) +
      geom_text(aes(label = paste(scales::percent(..count../sum(..count..),
            accuracy = 0.01))), 
            stat= "count", vjust = -0.5) 

design <- "
  321
  551
  664
"

p1 + p2 + p3 + p4 + p5 + p6 + plot_layout(design = design)
```
##4.1 Chi-square test for Age group and Education Level 

```{r}
ggbarstats(data = resident_profile, 
           x = educationLevel, y = age_group,
           package = "wesanderson", palette = "Chevalier1"
           )
```


## 4.2 Differences in Joviality based on Education Level
As defined, Joviality indicates the participant's overall happiness at the start of the study. We will like to found out if there is a difference in Joviality based on Education Level. 

### 4.2.1 Normality Assumption Test 
We will test the null hypothesis at 95% confidence level:
Ho: the mean Joviality across different Education Level is the same 
H1: the mean Joviality across different Education Level is not the same 

```{r}
#compute statistics 
average_joviality <- round(mean(resident_profile$joviality),2)
median_joviality <- round(median(resident_profile$joviality),2)
maximum_joviality <- as.numeric(round((IQR(resident_profile$joviality)*1.5) +
                quantile(resident_profile$joviality,0.75)),2)
min_joviality <- as.integer(min(resident_profile$joviality))
IQR_joviality <- round(IQR(resident_profile$joviality)*1.5)
average_joviality
median_joviality
maximum_joviality
min_joviality
IQR_joviality
```
```{r}
ggplot(data = resident_profile ,
  aes(x=joviality, after_stat(count), color = educationLevel)) +
  geom_density(adjust=1, position ="stack") +
  xlim(0,1) +
  geom_vline(aes(xintercept = average_joviality), col ="grey", linewidth=1 ) +
  geom_vline(aes(xintercept = median_joviality), col ="orange", linewidth=1 ) 
```



```{r}
ggplot(data=resident_profile,
       aes(sample = joviality)) + 
  stat_qq() +
  stat_qq_line()
```

```{r}
  ggplot(data = resident_profile,
         aes(x= joviality)) + 
  geom_histogram(bins=10) +
  xlab("Joviality") +
  ylab("No.of Residents") +
  geom_vline(aes(xintercept = average_joviality), col ="red", linewidth=1 ) +
  annotate("text", x=0.37, y= 1400, label="Average Joviality:", size=4, color = "red") +    annotate("text", x=0.37, y= 1300, label=format(average_joviality, big.mark=","), size=4, color = "red") 
  geom_vline(aes(xintercept = median_joviality), col ="green", linewidth=1 ) 

```

### 4.2.2 Kruskal-Wallis Test for Joviality across Education Level 
We will test the following hypothesis at 95% Confidence Level:

Ho : the median Joviality across different education level is the same

```{r}
#| code-fold: true
#| fig-width: 12
#| fig-height: 6
ggbetweenstats(data = resident_profile,
       x= educationLevel, y= joviality, type ="np",
       xlab= "Education Level", ylab = "Joviality",
       title = "Comparison of Joviality across Education Level",
       pairwise.comparisons = TRUE, pairwise.display ="ns", conf.level = 0.95,
       package = "wesanderson", palette = "Chevalier1"
       )
```
##4.3 Chi-square test for Age group and Joviality

Joviality level are binned into 4-class variables. 

```{r}
ggbarstats(data = resident_profile, 
           x = joviality_bins, y = age_group,
          title = "Comparison of Joviality across age-group",
          pairwise.comparisons = TRUE, pairwise.display ="s", conf.level = 0.95,
          package = "wesanderson", palette = "Chevalier1"
           )
```


```{r}
##KIV TO COME BACK AND EDIT. 
p3 <- ggplot(data= resident_profile,
      aes(x = Income)) +
      geom_histogram(bins=30,            
                 color="black",      
                 fill= "darkgrey") +
      xlab("Income") +
      ylab("No.of\nResidents") +
      ylim(0,2100) +
      xlim(-1000,20000) +
      ggtitle("Income Distribution of Residents ") +
      theme(plot.title = element_text(hjust = 0.5))
p3

```


# 5. Financial Health Insights

to include graphs of ID financial health over the 2 years 


```{r}

```


```{r}
plot_ly(data = resident_profile, 
             x = ~joviality, y = ~Income)
```

```{r}
p <- ggplot(data=resident_profile, 
       aes(x = Shelter)) +
  geom_dotplot_interactive(              
    aes(tooltip = Expenses, 
        data_id = Expenses),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```



```{r}
#Initiating the base plot
plot_ly(data = resident_profile,
        x = ~joviality,
        y = ~age,
        color = ~haveKids,
        hovertemplate = ~paste("<br>ID", participantId,
                               "<br>Education Level:", educationLevel,
                               "<br>Household Size ", householdSize),
        type = 'scatter',
        mode = 'markers',
        marker = list(opacity = 0.6,
                      sizemode = 'diameter',
                      line = list(width = 0.2, color = 'white'))) 
  
```
