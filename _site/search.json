[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Using p_load() of pacman package to load the required libraries\n\n\n\nShow the code\npacman::p_load(ggstatsplot, tidyverse,rstantools)\n\n\n\nImporting data\n\n\n\nShow the code\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visual-statistical-analysis-with-ggstatsplo",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visual-statistical-analysis-with-ggstatsplo",
    "title": "Hands-on Exercise 4",
    "section": "1) Visual Statistical Analysis with ggstatsplo",
    "text": "1) Visual Statistical Analysis with ggstatsplo\n\n1.1) One-sample test: gghistostats() method\nIn the below output, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nOutput:\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\n\n\n1.2) Two-sample mean test: ggbetweenstats()\nIn the below output, ggbetweenstats() is used to to build an visual of two-sample mean test.\n\nOutput:\n\n\nShow the code\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n1.3) One-way ANOVA Test: ggbetweenstats() method\nIn the below output, ggbetweenstats() is used to to build an visual of one-way ANOVA test.\n\nOutput:\n\n\nShow the code\nggbetweenstats(\n  data = exam_data, \n  x = RACE, \n  y = ENGLISH, \n  type = \"p\", \n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE,\n  #\"ns\" for only non-significant, \"s\" for only significant, \"all\" for everything\n  pairwise.display = \"s\",      \n  p.adjust.method = \"fdr\", \n  messages = FALSE \n  )\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n1.4) Significant Test of Correlation: ggscatterstats()\nIn the below output, ggscatterstats() is used to to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nOutput:\n\n\nShow the code\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n1.5) Significant Test of Association (Depedence) : ggbarstats() methods\nIn the below output, ggbarstats() is used to to build a visual for Significant Test of Association (Dependence).\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nOutput:\n\n\nShow the code\nexam1 <- exam_data |> \n  mutate(MATHS_bins =\n           cut(MATHS, \n               breaks = c(0, 60, 75, 85, 100)))\n\n\nIn this code chunk below, ggbarstats() is used to build a visual for Significant Test of Association.\n\n\nShow the code\nggbarstats(\n  data = exam1,\n  x = MATHS_bins,\n  y = GENDER\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-models",
    "title": "Hands-on Exercise 4",
    "section": "2) Visualising Models",
    "text": "2) Visualising Models\n\n2.1) Getting Started\n\nUsing p_load() of pacman package to load the required libraries\n\n\n\nShow the code\npacman::p_load(readxl, performance, parameters, see)\n\n\n\nImporting data\n\n\n\nShow the code\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n\n\nNote: car_resale is a tibble data frame.\n\n\n2.2) Multiple Regression Model using lm()\nIn the below output, lm() is used to calibrate a multiple linear regression model of Base Stats of R.\n\nOutput:\n\n\nShow the code\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n\n2.3) Model Diagnostic: Checking for multicolinearity using check_collinearity()\nIn the below output, check_collinearity() is used to check for multicolinearity.\n\nOutput:\n\n\nShow the code\ncheck_collinearity(model)\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\n\nShow the code\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\nAs per figure above, Age_08_04 and Mfg_Year are highly correlated.\nRemove/Drop Mfg_Year.\n\n\n\n2.3) Model Diagnostic: Checking for normality assumption using check_normality()\nIn the below output, check_normality() is used to check for normality assumption. #### Output:\n\n\nShow the code\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\n\n\nShow the code\ncheck_n <- check_normality(model1)\n\n\n\n\nShow the code\nplot(check_n)\n\n\n\n\n\nBased on the figure above, we will reject the Null hypothesis and infer that the model failed to conform to normaility assumption.\n\n\n2.4) Model Diagnostic: Checking model for homogeneity of variances using check_heteroscedasticity()\nIn the below output, check_heteroscedasticity() is used to check model for homogeneity of variances.\n\nOutput:\n\n\nShow the code\ncheck_h <- check_heteroscedasticity(model1)\n\n\n\n\nShow the code\nplot(check_h)\n\n\n\n\n\n\n\n\n2.5) Model Diagnostic: Complete check using check_model()\nIn the below output, check_model() is used.\n\nOutput:\n\n\nShow the code\ncheck_model(model1)\n\n\n\n\n\n\n\n\n2.6) Visualising Regression Parameters\nIn the below output, plot() of see package and parameters() of parameters package are used to visualize the parameters of a regression model.\n\nOutput:\n\n\nShow the code\nplot(parameters(model1))\n\n\n\n\n\nIn the below output, ggcoefstats() of ggstatsplot package is used to visualize the parameters of a regression model.\n\n\nOutput:\n\n\nShow the code\nggcoefstats(model1, \n            output = \"plot\")\n\n\n\n\n\n\n\n\n3) Visualising Uncertainty"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Using p_load() of pacman package to load the required libraries\n\n\n\nShow the code\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\nImporting data\n\n\n\nShow the code\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization-with-ggiraph",
    "title": "Hands-on Exercise 3",
    "section": "1) Interactive Data Visualization with ggiraph",
    "text": "1) Interactive Data Visualization with ggiraph\nStudent ID will appear when the mouse hovered to the specific data point.\n\nOutput:\n\n\nShow the code\np <-ggplot(data=exam_data, \n       aes(x = MATHS)) +\n    geom_dotplot_interactive(\n       aes(tooltip = ID),\n       stackgroups = TRUE, \n       binwidth = 1, \n       method = \"histodot\") +\n       scale_y_continuous(NULL, breaks = NULL)\n    \n    girafe(\n       ggobj = p,\n       width_svg = 6,\n       height_svg = 6*0.618\n             )\n\n\n\n\n\n\n\n\n1.1) Displaying multiple information with tooltip\nStudent ID and Class will appear when the mouse hovered to the specific data point.\n\nOutput:\n\n\nShow the code\nexam_data$tooltip <- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n     geom_dotplot_interactive(\n       aes(tooltip = exam_data$tooltip), \n       stackgroups = TRUE,\n       binwidth = 1,\n       method = \"histodot\") +\n       scale_y_continuous(NULL, breaks = NULL)\n\n     girafe(\n       ggobj = p,\n       width_svg = 8,\n       height_svg = 8*0.618\n           )\n\n\n\n\n\n\n\n\n\n1.2) Customizing tooltip style\nWhen the mouse hovered to the specific data point, the student ID will appear. We will customize the output to black and bold font with white background.\n\nOutput:\n\n\nShow the code\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n     geom_dotplot_interactive(              \n       aes(tooltip = ID),                   \n       stackgroups = TRUE,                  \n       binwidth = 1,                        \n       method = \"histodot\") +               \n       scale_y_continuous(NULL,               \n                     breaks = NULL)\n    girafe(                                  \n      ggobj = p,                             \n      width_svg = 6,                         \n      height_svg = 6*0.618,\n      options = list(    #<<\n      opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n          )                                        \n\n\n\n\n\n\n\n\n\n1.3) Displaying statistics with tooltip\nWhen the mouse hovered to the specific data point, statistics will appear. In the below output, confidence interval will be displayed at 90% CI.\n\nOutput:\n\n\nShow the code\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean Maths Scores:\", mean, \"+/-\", sem)\n}\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),) +\n            stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                  tooltip(y, ymax))),  \n            fun.data = \"mean_se\", \n                  geom = GeomInteractiveCol,  \n                  fill = \"light blue\"\n                  ) +\n           stat_summary(aes(y = MATHS),\n                 fun.data = mean_se,\n                 geom = \"errorbar\", width = 0.2, linewidth = 0.2\n                  )\n\n           girafe(ggobj = gg_point,\n               width_svg = 8,\n               height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n1.4) Hover effect with data_id aesthetic\nWhen the mouse hovered to the specific data point, data points that are associated with the data_id(CLASS) will be highlighted.\n\nOutput:\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n     geom_dotplot_interactive(           \n       aes(data_id = CLASS),             \n       stackgroups = TRUE,               \n       binwidth = 1,                        \n       method = \"histodot\") +               \n     scale_y_continuous(NULL, breaks = NULL)\n\n     girafe(                                  \n       ggobj = p,                             \n       width_svg = 6,                         \n       height_svg = 6*0.618                      \n        )                                        \n\n\n\n\n\n\n\n\n\n1.5) Customizing Hover effect\nSimilar to 1.2, we will customize the Hover Effect with the help of CSS.\n\nOutput:\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n     geom_dotplot_interactive(              \n       aes(data_id = CLASS),              \n       stackgroups = TRUE,                  \n       binwidth = 1,                        \n       method = \"histodot\") +               \n     scale_y_continuous(NULL, breaks = NULL)\n\n     girafe(                                  \n       ggobj = p,                             \n       width_svg = 6,                         \n       height_svg = 6*0.618,\n       options = list(                        \n       opts_hover(css = \"fill: #202020;\"),  \n       opts_hover_inv(css = \"opacity:0.2;\") \n           )                                        \n             )                                        \n\n\n\n\n\n\n\n\n\n1.6) Combining tooltip and Hover Effect\nIn the below output, we will combine both Interactive Data Visualization. The respective data points and the associated points will be reflected.\n\nOutput:\n\n\nShow the code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n     geom_dotplot_interactive(              \n       aes(tooltip = CLASS, \n       data_id = CLASS),              \n       stackgroups = TRUE,                  \n       binwidth = 1,                        \n       method = \"histodot\") +               \n     scale_y_continuous(NULL, breaks = NULL)\n     \n     girafe(                                  \n       ggobj = p,                             \n       width_svg = 6,                         \n       height_svg = 6*0.618,\n      options = list(                        \n      opts_hover(css = \"fill: #202020;\"),  \n      opts_hover_inv(css = \"opacity:0.2;\") \n         )                                        \n           )                                        \n\n\n\n\n\n\n\n\n\n1.7) Click effect with onclick\nIn the below output, a new window will open upon a click (hotlink interactivity)\nNote: Click actions must be a string column\n\nOutput:\n\n\nShow the code\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n     geom_dotplot_interactive(              \n       aes(onclick = onclick),              \n       stackgroups = TRUE,                  \n       binwidth = 1,                        \n       method = \"histodot\") +               \n     scale_y_continuous(NULL, breaks = NULL)\n\n     girafe(                                  \n       ggobj = p,                             \n       width_svg = 6,                         \n       height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n1.8) Coordinated multiple views\nIn the below output, the graph will be interactive. Hovering on one data point will reflect the corresponding data point. We will be using :\n\npatchwork function [use inside girafe function]\nggiraph [use to create multiple views]\n\nNote: data_id aesthetic is critical, tooltip aesthetic is optional\n\nOutput:\n\n\nShow the code\np1 <- ggplot(data=exam_data, \n        aes(x = MATHS)) +\n     geom_dotplot_interactive(              \n       aes(data_id = ID),              \n       stackgroups = TRUE,                  \n       binwidth = 1,                        \n       method = \"histodot\") +  \n     coord_cartesian(xlim=c(0,100)) + \n     scale_y_continuous(NULL, breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n     geom_dotplot_interactive(              \n       aes(data_id = ID),              \n       stackgroups = TRUE,                  \n       binwidth = 1,                        \n       method = \"histodot\") + \n     coord_cartesian(xlim=c(0,100)) + \n     scale_y_continuous(NULL, breaks = NULL)\n\n     girafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n            )\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization-with-plotly",
    "title": "Hands-on Exercise 3",
    "section": "2) Interactive Data Visualization with plotly",
    "text": "2) Interactive Data Visualization with plotly\nThere are two ways to create interactive graph through plotly:\n\nplot_ly()\nggploty()\n\n\n2.1) Create interactive scatter plot with plot_ly() method\nIn the below output, the interactive graph is created through plot_ ly().\n\nOutput:\n\n\nShow the code\nplot_ly(data = exam_data, \n             x = ~MATHS, y = ~ENGLISH)\n\n\n\n\n\n\n\n\n\n2.2) Create interactive scatter plot with plot_ly() method\nIn the below output, the interactive graph is enhanced with the addition of RACE as a visual variable.\n\nOutput:\n\n\nShow the code\nplot_ly(data = exam_data, \n             x = ~MATHS, y = ~ENGLISH, color = ~RACE)\n\n\n\n\n\n\n\n\n\n2.3) Create interactive scatter plot with ggplotly() method\nIn the below output, the interactive graph is created through ggplotly().\n\nOutput:\nNote: only 1 additional line required (Line 7)\n\n\nShow the code\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n     geom_point(size=1) +\n    coord_cartesian(xlim=c(0,100), ylim=c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\n2.4) Coordinated multiple views with plotly\nThe coordinated linked graphs will be achieved in three steps:\n\nUse highlight_key() of plotly as a shared data\nCreate two scatter plots through ggplot2 functions\nSubplot() of plotly package used to place them side by side\n\n\nOutput:\n\n\nShow the code\nd <- highlight_key(exam_data)\n\np1 <- ggplot(data=d, \n         aes(x = MATHS, y = ENGLISH)) +\n      geom_point(size=1) +\n      coord_cartesian(xlim=c(0,100), ylim=c(0,100))\n\np2 <- ggplot(data=d, \n         aes(x = MATHS, y = SCIENCE)) +\n      geom_point(size=1) +\n      coord_cartesian(xlim=c(0,100), ylim=c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nNote to self: patchwork is not interactive in comparion but includes labelling"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization-with-crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization-with-crosstalk-methods",
    "title": "Hands-on Exercise 3",
    "section": "3) Interactive Data Visualization with crosstalk methods",
    "text": "3) Interactive Data Visualization with crosstalk methods\nIt is an add-on to htmlwidgets package with cross-widget interactions.\n\n3.1) Interactive Data Table: DT package\nIn the below output, the interactive data table is created through DT package.\n\nOutput:\n\n\nShow the code\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\n3.2) Linked brushing crosstalk method\nIn the below output, the interactive data table is created through DT package.\n\nOutput:\n\n\nShow the code\nd <- highlight_key(exam_data) \n\np <- ggplot(d, \n       aes(ENGLISH, MATHS)) + \n     geom_point(size=1) +\n     coord_cartesian(xlim=c(0,100), ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualization-with-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualization-with-gganimate-methods",
    "title": "Hands-on Exercise 3",
    "section": "4) Animated Data Visualization with gganimate methods",
    "text": "4) Animated Data Visualization with gganimate methods\ngganimate is an extension of ggplot2 which includes animation and includes the following:\n\ntransition_() defines how the data should be spread out and how it relates to itself across time.\nview_() defines how the positional scales should change along the animation.\nshadow_() defines how data from other points in time should be presented in the given point in time.\nenter_()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nSource\nPrior to building the graph, we would need to:\n\nUsing p_load() of pacman package to load the required libraries\n\n\n\nShow the code\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\nImporting data\n\n\n\nShow the code\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\n\n\n\n4.1) Building a static population bubble plot\nIn the below output, basic ggplot2 functions are used to create a static bubble plot.\n\nOutput:\n\n\nShow the code\nggplot(globalPop, \n       aes(x = Old, y = Young, \n       size = Population, \n       colour = Country)) +\n  geom_point(alpha = 0.7, \n       show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n4.2) Building the animation bubble plot\nSimilar to 4.1, the below output will be animated.\n\nOutput:\n\n\nShow the code\nggplot(globalPop, \n       aes(x = Old, y = Young, \n       size = Population, \n       colour = Country)) +\n  geom_point(alpha = 0.7, \n       show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualization-with-plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualization-with-plotly-methods",
    "title": "Hands-on Exercise 3",
    "section": "5) Animated Data Visualization with plotly methods",
    "text": "5) Animated Data Visualization with plotly methods\nSimilar to section 4, both ggplotly and plotly support animated data visualization.\n\n5.1) Building an animated bubble plot plotly\nIn this sub-section, we will create an animated bubble plot..\n\nOutput:\n\n\nShow the code\nbp <- globalPop %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Using p_load() of pacman package to load the required libraries\n\n\n\nShow the code\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes,tidyverse) \n\n\n\nImporting data\n\n\n\nShow the code\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#english-scores-vs-maths-scores-for-primary-3",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#english-scores-vs-maths-scores-for-primary-3",
    "title": "Hands-on Exercise 2",
    "section": "1) English scores vs Maths scores for Primary 3",
    "text": "1) English scores vs Maths scores for Primary 3\n\nOutput:\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n       geom_point() +\n       geom_smooth(method=lm, size=0.5) +  \n       geom_label_repel(aes(label = ID), fontface = \"bold\") +\n       coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n       ggtitle(\"English scores versus Maths scores for Primary 3\") +\n       theme(plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#distribution-of-maths-scores",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#distribution-of-maths-scores",
    "title": "Hands-on Exercise 2",
    "section": "2) Distribution of Maths scores",
    "text": "2) Distribution of Maths scores\n\nOutput:\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n       geom_histogram(bins= 30, color= \"grey30\", fill = \"grey95\") +\n       coord_cartesian(xlim=c(0,100)) +\n       theme_grey() + \n       ggtitle(\"Distribution of Maths scores\") +\n       theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n2.1) ggtheme package\n\nThemes here\n\n\nOutput:\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x=MATHS)) + \n       geom_histogram(bins=30, color= \"grey30\", fill = \"grey95\") +\n       coord_cartesian(xlim=c(0,100)) +\n      theme_economist() +\n       ggtitle(\"Distribution of Maths scores\") +\n       theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n2.2) hrbthems package\n\nThemes here\n\n\nOutput:\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x=MATHS)) + \n       geom_histogram(bins=20, boundary = 100,  \n       color= \"grey30\", fill = \"grey95\") +\n       coord_cartesian(xlim=c(0,100)) +\n       theme_ipsum() +\n       ggtitle(\"Distribution of Maths scores\") +\n       theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n2.2.1) hrbthems package: theme revision\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and,\ngrid argument is used to remove the x-axis grid lines.\n\n\nOutput:\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x=MATHS)) + \n       geom_histogram(bins=20, boundary = 100,  \n       color= \"grey30\", fill = \"grey95\") +\n       coord_cartesian(xlim=c(0,100)) +\n       theme_ipsum(grid = \"y\",axis_title_size = 18, base_size =15) +\n       ggtitle(\"Distribution of Maths scores\") +\n       theme(plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-multiple-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-multiple-graphs",
    "title": "Hands-on Exercise 2",
    "section": "3) Creating multiple graphs",
    "text": "3) Creating multiple graphs\nCreate composite plot by combining multiple graphs. Firstly, to create three statistical graphics.\n\n3.1) Distribution of Maths Scores\n\nOutput:\n\n\nShow the code\np1 <- ggplot(data = exam_data, \n       aes(x=MATHS)) + \n       geom_histogram(bins=20, boundary = 100,  \n       color= \"grey30\", fill = \"grey95\") +\n       coord_cartesian(xlim=c(0,100)) +\n       ggtitle(\"Distribution of \\nMaths scores\") +\n       theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n3.2) Distribution of English Scores\n\nOutput:\n\n\nShow the code\np2 <- ggplot(data = exam_data, \n       aes(x=ENGLISH)) + \n       geom_histogram(bins=20, boundary = 100,  \n       color= \"grey30\", fill = \"grey95\") +\n       coord_cartesian(xlim=c(0,100)) +\n       ggtitle(\"Distribution of \\nEnglish scores\") +\n       theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n3.3) English scores vs Maths scores for Primary 3\n\nOutput :\n\n\nShow the code\np3 <- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n       geom_point() +\n       geom_smooth(method=lm, size=0.5) +  \n       coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n       ggtitle(\"English scores vs Maths \\nscores for Primary 3\") +\n       theme(plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-multiple-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-multiple-graphs",
    "title": "Hands-on Exercise 2",
    "section": "4) Plotting multiple graphs",
    "text": "4) Plotting multiple graphs\nPoint to note:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\n\nTwo-Row Layout using the Division Sign /\n\nSource\n\n\n4.1) Combine 3.1 and 3.2\nIn this output, we will combine Distribution of Maths Scores and Distribution of English Scores.\n\nOutput :\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n4.2) Combine 3.1, 3.2, and 3.3\nPoint to note:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nSource\nIn this output, we will combine Distribution of Maths Scores, Distribution of English Scores, and English scores vs Maths scores for Primary 3 by stacking 3.1 and 3.2 on the left and 3.3 on the right.\n\n\nOutput :\n\n\nShow the code\np1 / p2 | p3\n\n\n\n\n\n\n\n\n4.3) Insert 3.2 into 3.3\nIn this output, we will insert Distribution of English Scores on top of English scores vs Maths scores for Primary 3.\n\nOutput :\n\n\nShow the code\np3 + inset_element(p2, left = 0.02, bottom = 0.6, right = 0.4, top = 1)\n\n\n\n\n\n\n\n\n4.4) Add patchwork and ggtheme to 4.2\nIn this output, we will add patchwork and ggtheme.\n\nOutput :\n\n\nShow the code\npatchwork <- p1 / p2 | p3\npatchwork & theme_economist(base_size = 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nShow the code\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nShow the code\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-Home_Ex/Take_Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take_Home_Ex01/Take-Home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received. \n\n\nIn this take-home exercise, you are required to apply the concepts and methods you had learned in Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement, using appropriate static and interactive statistical graphics methods."
  },
  {
    "objectID": "Take-Home_Ex/Take_Home_Ex01/Take-Home_Ex01.html#install-r-packages",
    "href": "Take-Home_Ex/Take_Home_Ex01/Take-Home_Ex01.html#install-r-packages",
    "title": "Take Home Exercise 1",
    "section": "3.1 Install R-packages",
    "text": "3.1 Install R-packages\nUsing p_load() of pacman package to load the required libraries\n\n\nShow the code\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Take-Home_Ex/Take_Home_Ex01/Take-Home_Ex01.html#import-data",
    "href": "Take-Home_Ex/Take_Home_Ex01/Take-Home_Ex01.html#import-data",
    "title": "Take Home Exercise 1",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\n3.2.1 Import participants dataset\n\n\nShow the code\nparticipants <- read_csv(\"data/Participants.csv\")\n\n\n\n\n3.2.2 Load participants data table\n\nParticipants Data Table\n\n\nShow the code\nhead(participants)\n\n\n# A tibble: 6 × 7\n  participantId householdSize haveKids   age educationLevel      interestGroup\n          <dbl>         <dbl> <lgl>    <dbl> <chr>               <chr>        \n1             0             3 TRUE        36 HighSchoolOrCollege H            \n2             1             3 TRUE        25 HighSchoolOrCollege B            \n3             2             3 TRUE        35 HighSchoolOrCollege A            \n4             3             3 TRUE        21 HighSchoolOrCollege I            \n5             4             3 TRUE        43 Bachelors           H            \n6             5             3 TRUE        32 HighSchoolOrCollege D            \n# ℹ 1 more variable: joviality <dbl>\n\n\n\n\n\n3.2.3 Import Financial Journal dataset\n\n\nShow the code\nfinancial_journal <- read_csv(\"data/FinancialJournal.csv\")\n\n\n\n\n3.2.4 Load Financial Journal data table\n\nFinancial Journal Data Table\n\n\nShow the code\nhead(financial_journal)\n\n\n# A tibble: 6 × 4\n  participantId timestamp           category  amount\n          <dbl> <dttm>              <chr>      <dbl>\n1             0 2022-03-01 00:00:00 Wage      2473. \n2             0 2022-03-01 00:00:00 Shelter   -555. \n3             0 2022-03-01 00:00:00 Education  -38.0\n4             1 2022-03-01 00:00:00 Wage      2047. \n5             1 2022-03-01 00:00:00 Shelter   -555. \n6             1 2022-03-01 00:00:00 Education  -38.0"
  },
  {
    "objectID": "Take-Home_Ex/Take_Home_Ex01/Take-Home_Ex01.html#data-wrangling",
    "href": "Take-Home_Ex/Take_Home_Ex01/Take-Home_Ex01.html#data-wrangling",
    "title": "Take Home Exercise 1",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\nAs seen from the two data tables, there are inaccurate data types. Code with mutate from dplyr to reformat participantID from dbl to chr. groupby participantID remove duplicates reformat timestamp to year and month create new variables for income, expenses, cashflow\nThe function distinct() [dplyr package] can be used to keep only unique/distinct rows from a data frame.\n\nparticipants Data Table\n\n\nShow the code\n#change data type of participantID from dbl to char \nparticipants %>%\n  mutate(participantId = as.character(participantId))\n\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n   <chr>                 <dbl> <lgl>    <dbl> <chr>               <chr>        \n 1 0                         3 TRUE        36 HighSchoolOrCollege H            \n 2 1                         3 TRUE        25 HighSchoolOrCollege B            \n 3 2                         3 TRUE        35 HighSchoolOrCollege A            \n 4 3                         3 TRUE        21 HighSchoolOrCollege I            \n 5 4                         3 TRUE        43 Bachelors           H            \n 6 5                         3 TRUE        32 HighSchoolOrCollege D            \n 7 6                         3 TRUE        26 HighSchoolOrCollege I            \n 8 7                         3 TRUE        27 Bachelors           A            \n 9 8                         3 TRUE        20 Bachelors           G            \n10 9                         3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality <dbl>\n\n\nShow the code\nfinancial_journal %>%\n  mutate(participantId = as.character(participantId))\n\n\n# A tibble: 1,513,636 × 4\n   participantId timestamp           category  amount\n   <chr>         <dttm>              <chr>      <dbl>\n 1 0             2022-03-01 00:00:00 Wage      2473. \n 2 0             2022-03-01 00:00:00 Shelter   -555. \n 3 0             2022-03-01 00:00:00 Education  -38.0\n 4 1             2022-03-01 00:00:00 Wage      2047. \n 5 1             2022-03-01 00:00:00 Shelter   -555. \n 6 1             2022-03-01 00:00:00 Education  -38.0\n 7 2             2022-03-01 00:00:00 Wage      2437. \n 8 2             2022-03-01 00:00:00 Shelter   -557. \n 9 2             2022-03-01 00:00:00 Education  -12.8\n10 3             2022-03-01 00:00:00 Wage      2367. \n# ℹ 1,513,626 more rows\n\n\n\n\nShow the code\nunique(financial_journal$category)\n\n\n[1] \"Wage\"           \"Shelter\"        \"Education\"      \"RentAdjustment\"\n[5] \"Food\"           \"Recreation\"    \n\n\n\n\nShow the code\nmin(participants$age)\n\n\n[1] 18\n\n\nShow the code\nmax(participants$age)\n\n\n[1] 60\n\n\nShow the code\n#reformat age group \nage_group <- factor(ifelse(participants$age < 20, \"Under 20\",\n                ifelse(participants$age < 30, \"20-29\",\n                    ifelse(participants$age < 40, \"30-39\",\n                      ifelse(participants$age < 50, \"40-49\", \"Above 50\")))),\n                levels = c(\"Under 20\", \"20-29\", \"30-39\", \"40-49\", \"Above 50\"),\n                ordered= TRUE)\n\n#reformat education level\nparticipants$educationLevel <- factor(participants$educationLevel, \n                                      levels = c(\"Low\", \"Graduate\", \"Bachelors\",\n                                                 \"HighSchoolOrCollege\"), \n                                      ordered = TRUE)\n\nparticipants %>%\n    mutate(age_group,.after=age)\n\n\n# A tibble: 1,011 × 8\n   participantId householdSize haveKids   age age_group educationLevel     \n           <dbl>         <dbl> <lgl>    <dbl> <ord>     <ord>              \n 1             0             3 TRUE        36 30-39     HighSchoolOrCollege\n 2             1             3 TRUE        25 20-29     HighSchoolOrCollege\n 3             2             3 TRUE        35 30-39     HighSchoolOrCollege\n 4             3             3 TRUE        21 20-29     HighSchoolOrCollege\n 5             4             3 TRUE        43 40-49     Bachelors          \n 6             5             3 TRUE        32 30-39     HighSchoolOrCollege\n 7             6             3 TRUE        26 20-29     HighSchoolOrCollege\n 8             7             3 TRUE        27 20-29     Bachelors          \n 9             8             3 TRUE        20 20-29     Bachelors          \n10             9             3 TRUE        35 30-39     Bachelors          \n# ℹ 1,001 more rows\n# ℹ 2 more variables: interestGroup <chr>, joviality <dbl>\n\n\nYou can use group_by() function along with the summarise() from dplyr package to find the group by sum in R DataFrame, group_by() returns the grouped_df ( A grouped Data Frame) and use summarise() on grouped df results to get the group by sum.\n\n\nShow the code\n#store new dataset in variable ->  financial_journal_clean\nfinancial_journal_clean <- financial_journal %>%\n  \n#reformat timestamp to Year and Month\n  mutate(year = as.integer(format(as.Date(paste(financial_journal$timestamp, \"-01\", sep=\"\")), \"%Y\")),\n         month = as.integer(format(as.Date(paste(financial_journal$timestamp, \"-01\", sep=\"\")), \"%m\")),\n         .before = 3) \n  \n#create new variables called \n \nfinancial_journal_clean\n\n\n# A tibble: 1,513,636 × 6\n   participantId timestamp            year month category  amount\n           <dbl> <dttm>              <int> <int> <chr>      <dbl>\n 1             0 2022-03-01 00:00:00  2022     3 Wage      2473. \n 2             0 2022-03-01 00:00:00  2022     3 Shelter   -555. \n 3             0 2022-03-01 00:00:00  2022     3 Education  -38.0\n 4             1 2022-03-01 00:00:00  2022     3 Wage      2047. \n 5             1 2022-03-01 00:00:00  2022     3 Shelter   -555. \n 6             1 2022-03-01 00:00:00  2022     3 Education  -38.0\n 7             2 2022-03-01 00:00:00  2022     3 Wage      2437. \n 8             2 2022-03-01 00:00:00  2022     3 Shelter   -557. \n 9             2 2022-03-01 00:00:00  2022     3 Education  -12.8\n10             3 2022-03-01 00:00:00  2022     3 Wage      2367. \n# ℹ 1,513,626 more rows\n\n\n\n\nShow the code\ngrouped_data <- financial_journal_clean %>%\n  group_by(participantId,year,month, category) %>%\n  summarize(total_amount = sum(amount))\n\ngrouped_data\n\n\n# A tibble: 44,524 × 5\n# Groups:   participantId, year, month [10,691]\n   participantId  year month category   total_amount\n           <dbl> <int> <int> <chr>             <dbl>\n 1             0  2022     3 Education         -76.0\n 2             0  2022     3 Food             -268. \n 3             0  2022     3 Recreation       -349. \n 4             0  2022     3 Shelter         -1110. \n 5             0  2022     3 Wage            11932. \n 6             0  2022     4 Education         -38.0\n 7             0  2022     4 Food             -266. \n 8             0  2022     4 Recreation       -219. \n 9             0  2022     4 Shelter          -555. \n10             0  2022     4 Wage             8637. \n# ℹ 44,514 more rows\n\n\nThe function distinct() [dplyr package] can be used to keep only unique/distinct rows from a data frame. If there are duplicate rows, only the first row is preserved.\n\n\nShow the code\nfinancial_journal_clean %>% distinct()\n\n\n# A tibble: 1,512,523 × 6\n   participantId timestamp            year month category  amount\n           <dbl> <dttm>              <int> <int> <chr>      <dbl>\n 1             0 2022-03-01 00:00:00  2022     3 Wage      2473. \n 2             0 2022-03-01 00:00:00  2022     3 Shelter   -555. \n 3             0 2022-03-01 00:00:00  2022     3 Education  -38.0\n 4             1 2022-03-01 00:00:00  2022     3 Wage      2047. \n 5             1 2022-03-01 00:00:00  2022     3 Shelter   -555. \n 6             1 2022-03-01 00:00:00  2022     3 Education  -38.0\n 7             2 2022-03-01 00:00:00  2022     3 Wage      2437. \n 8             2 2022-03-01 00:00:00  2022     3 Shelter   -557. \n 9             2 2022-03-01 00:00:00  2022     3 Education  -12.8\n10             3 2022-03-01 00:00:00  2022     3 Wage      2367. \n# ℹ 1,512,513 more rows\n\n\nShow the code\nparticipants_clean <- participants \nparticipants_clean %>% distinct()\n\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n           <dbl>         <dbl> <lgl>    <dbl> <ord>               <chr>        \n 1             0             3 TRUE        36 HighSchoolOrCollege H            \n 2             1             3 TRUE        25 HighSchoolOrCollege B            \n 3             2             3 TRUE        35 HighSchoolOrCollege A            \n 4             3             3 TRUE        21 HighSchoolOrCollege I            \n 5             4             3 TRUE        43 Bachelors           H            \n 6             5             3 TRUE        32 HighSchoolOrCollege D            \n 7             6             3 TRUE        26 HighSchoolOrCollege I            \n 8             7             3 TRUE        27 Bachelors           A            \n 9             8             3 TRUE        20 Bachelors           G            \n10             9             3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality <dbl>\n\n\nShow the code\ngrouped_data %>% distinct()\n\n\n# A tibble: 44,524 × 5\n# Groups:   participantId, year, month [10,691]\n   participantId  year month category   total_amount\n           <dbl> <int> <int> <chr>             <dbl>\n 1             0  2022     3 Education         -76.0\n 2             0  2022     3 Food             -268. \n 3             0  2022     3 Recreation       -349. \n 4             0  2022     3 Shelter         -1110. \n 5             0  2022     3 Wage            11932. \n 6             0  2022     4 Education         -38.0\n 7             0  2022     4 Food             -266. \n 8             0  2022     4 Recreation       -219. \n 9             0  2022     4 Shelter          -555. \n10             0  2022     4 Wage             8637. \n# ℹ 44,514 more rows\n\n\nCheck for missing values\n\n\nShow the code\n#Check for missing values\nany(is.na(participants_clean))\n\n\n[1] FALSE\n\n\nShow the code\nany(is.na(financial_journal_clean))\n\n\n[1] FALSE"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Using p_load() of pacman package to load tidyverse on\n\n\n\nShow the code\npacman:: p_load(tidyverse) \n\n\n\nImporting data\n\n\n\nShow the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#horizontal-bar-graph",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#horizontal-bar-graph",
    "title": "In-class Exercise 1",
    "section": "1) Horizontal Bar Graph",
    "text": "1) Horizontal Bar Graph\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\nOutput:\n\n\nShow the code\nggplot(data= exam_data,\n       aes(x = RACE)) +\n       geom_bar() +\n       coord_flip() +\n       theme_minimal() +\n       theme(panel.background = element_rect(fill = 'lightblue') ,\n       panel.grid.minor=element_line(colour=\"white\"),\n       panel.grid.major=element_line(colour=\"white\")) +\n       ggtitle(\"Horizontal Bar Chart: \\nLight Blue theme and White grid lines \") +  \n       theme(plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#vertical-bar-graph",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#vertical-bar-graph",
    "title": "In-class Exercise 1",
    "section": "2) Vertical Bar Graph",
    "text": "2) Vertical Bar Graph\nWith reference to the critics on the earlier slide, create a makeover looks similar to the figure on the right.\n\nOutput 1:\n\n\nShow the code\nggplot(data= exam_data,\n      aes(x = fct_infreq(RACE))) +\n      geom_bar() +\n      xlab(\"Race\") +\n      ylab(\"No.of\\nPupils\") +\n      ylim(0,220) +\n      geom_text(aes(label = paste(..count..,\",\", scales::percent(..count../sum(..count..),accuracy = 0.1))), \n      stat= \"count\", vjust = -0.5) +\n      ggtitle(\"Vertical Bar Chart: \\nSorted Frequency + Labelling \") +\n      theme(plot.title = element_text(hjust = 0.5))\n\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\n\n\nOutput 2: Forcats Package.:\n\n\nShow the code\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#histogram",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#histogram",
    "title": "In-class Exercise 1",
    "section": "3) Histogram",
    "text": "3) Histogram\n\nAdding mean and median lines on the histogram plot.\nChange fill color and line color\n\n\nOutput:\n\n\nShow the code\nggplot(data= exam_data,\n       aes(x = MATHS)) +\n       geom_histogram(color=\"black\",fill=\"light blue\",bins = 30) +\n       geom_vline(aes(xintercept=mean(MATHS)),\n            color=\"red\", linetype=\"dashed\", size=1) +\n       geom_vline(aes(xintercept=median(MATHS)),\n            color=\"black\", linetype=\"dashed\", size=1) +\n       ggtitle(\"Histogram: \\nAdd lines and color \") +  \n       theme(plot.title = element_text(hjust = 0.5))\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n3.1) By Gender\n\nThe background histograms show the distribution of English scores for all pupils.\n\n\nOutput:\n\n\nShow the code\nd <- exam_data   \nd_bg <- d[, -3] \n\nggplot(d, aes(x = ENGLISH)) +\n       geom_histogram (data= d_bg, bins=30, alpha = 0.2) +\n       geom_histogram (bins=30, color = 'black') +\n       facet_wrap(~ GENDER) + \n       theme_bw()       \n\n\n\n\n\n\n\nShow the code\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  theme_bw() \n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nShow the code\nd <- exam_data   \nd_bg <- d[, -3] \n\nggplot(data = exam_data, aes(x = ENGLISH, fill= GENDER, )) +\n    geom_histogram(bins = 30) +\n    facet_wrap(~ GENDER) +\n    guides(fill = FALSE) \n\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#scatterplot",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#scatterplot",
    "title": "In-class Exercise 1",
    "section": "4) Scatterplot",
    "text": "4) Scatterplot\n\nThe scatterplot show the relationship between English and Maths for all pupils.\n\n\nOutput:\n\n\nShow the code\nggplot(data = exam_data, \n        aes (x= MATHS, y= ENGLISH)) +\n        geom_point() +\n        geom_hline(yintercept=50, linetype=\"dashed\", color = \"darkgrey\") +\n        geom_vline(xintercept=50, linetype=\"dashed\", color = \"darkgrey\") +\n        coord_cartesian(xlim=c(0,100), ylim=c(0,100))"
  }
]