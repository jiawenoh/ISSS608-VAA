---
title: "Hands-on Exercise 3"
author: "Oh Jia Wen"
date: 4/30/2023
date-modified: 5/1/2023
execute: 
  warning: false
---

# Getting started

1.  Using p_load() of pacman package to load the required libraries

```{r}
pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) 
```

2.  Importing data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# Plotting the graph

## 1) Interactive Data Visualization with **ggiraph**

Student ID will appear when the mouse hovered to the specific data point.

#### Output:

```{r}
p <-ggplot(data=exam_data, 
       aes(x = MATHS)) +
    geom_dotplot_interactive(
       aes(tooltip = ID),
       stackgroups = TRUE, 
       binwidth = 1, 
       method = "histodot") +
       scale_y_continuous(NULL, breaks = NULL)
    
    girafe(
       ggobj = p,
       width_svg = 6,
       height_svg = 6*0.618
             )
```

### 1.1) Displaying multiple information with tooltip

Student ID and Class will appear when the mouse hovered to the specific data point.

#### Output:

```{r}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
     geom_dotplot_interactive(
       aes(tooltip = exam_data$tooltip), 
       stackgroups = TRUE,
       binwidth = 1,
       method = "histodot") +
       scale_y_continuous(NULL, breaks = NULL)

     girafe(
       ggobj = p,
       width_svg = 8,
       height_svg = 8*0.618
           )
```

### 1.2) Customizing tooltip style

When the mouse hovered to the specific data point, the student ID will appear. We will customize the output to black and bold font with white background.

#### Output:

```{r}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
     geom_dotplot_interactive(              
       aes(tooltip = ID),                   
       stackgroups = TRUE,                  
       binwidth = 1,                        
       method = "histodot") +               
       scale_y_continuous(NULL,               
                     breaks = NULL)
    girafe(                                  
      ggobj = p,                             
      width_svg = 6,                         
      height_svg = 6*0.618,
      options = list(    #<<
      opts_tooltip(    #<<
      css = tooltip_css)) #<<
          )                                        
```

### 1.3) Displaying statistics with tooltip

When the mouse hovered to the specific data point, statistics will appear. In the below output, confidence interval will be displayed at 90% CI.

#### Output:

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean Maths Scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),) +
            stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                  tooltip(y, ymax))),  
            fun.data = "mean_se", 
                  geom = GeomInteractiveCol,  
                  fill = "light blue"
                  ) +
           stat_summary(aes(y = MATHS),
                 fun.data = mean_se,
                 geom = "errorbar", width = 0.2, linewidth = 0.2
                  )

           girafe(ggobj = gg_point,
               width_svg = 8,
               height_svg = 8*0.618)
```

### 1.4) Hover effect with **data_id** aesthetic

When the mouse hovered to the specific data point, data points that are associated with the data_id(CLASS) will be highlighted.

#### Output:

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
     geom_dotplot_interactive(           
       aes(data_id = CLASS),             
       stackgroups = TRUE,               
       binwidth = 1,                        
       method = "histodot") +               
     scale_y_continuous(NULL, breaks = NULL)

     girafe(                                  
       ggobj = p,                             
       width_svg = 6,                         
       height_svg = 6*0.618                      
        )                                        
```

### 1.5) Customizing Hover effect

Similar to 1.2, we will customize the Hover Effect with the help of CSS.

#### Output:

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
     geom_dotplot_interactive(              
       aes(data_id = CLASS),              
       stackgroups = TRUE,                  
       binwidth = 1,                        
       method = "histodot") +               
     scale_y_continuous(NULL, breaks = NULL)

     girafe(                                  
       ggobj = p,                             
       width_svg = 6,                         
       height_svg = 6*0.618,
       options = list(                        
       opts_hover(css = "fill: #202020;"),  
       opts_hover_inv(css = "opacity:0.2;") 
           )                                        
             )                                        
```

### 1.6) Combining tooltip and Hover Effect

In the below output, we will combine both Interactive Data Visualization. The respective data points and the associated points will be reflected.

#### Output:

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
     geom_dotplot_interactive(              
       aes(tooltip = CLASS, 
       data_id = CLASS),              
       stackgroups = TRUE,                  
       binwidth = 1,                        
       method = "histodot") +               
     scale_y_continuous(NULL, breaks = NULL)
     
     girafe(                                  
       ggobj = p,                             
       width_svg = 6,                         
       height_svg = 6*0.618,
      options = list(                        
      opts_hover(css = "fill: #202020;"),  
      opts_hover_inv(css = "opacity:0.2;") 
         )                                        
           )                                        
```

### 1.7) Click effect with **onclick**

In the below output, a new window will open upon a click (hotlink interactivity)

*`Note: Click actions must be a string column`*

#### Output:

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
     geom_dotplot_interactive(              
       aes(onclick = onclick),              
       stackgroups = TRUE,                  
       binwidth = 1,                        
       method = "histodot") +               
     scale_y_continuous(NULL, breaks = NULL)

     girafe(                                  
       ggobj = p,                             
       width_svg = 6,                         
       height_svg = 6*0.618)                                        
```

### 1.8) Coordinated multiple views

In the below output, the graph will be interactive. Hovering on one data point will reflect the corresponding data point. We will be using :

1.  patchwork function \[use inside girafe function\]

2.  ggiraph \[use to create multiple views\]

*`Note: data_id aesthetic is critical, tooltip aesthetic is optional`*

#### Output:

```{r}
p1 <- ggplot(data=exam_data, 
        aes(x = MATHS)) +
     geom_dotplot_interactive(              
       aes(data_id = ID),              
       stackgroups = TRUE,                  
       binwidth = 1,                        
       method = "histodot") +  
     coord_cartesian(xlim=c(0,100)) + 
     scale_y_continuous(NULL, breaks = NULL)

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
     geom_dotplot_interactive(              
       aes(data_id = ID),              
       stackgroups = TRUE,                  
       binwidth = 1,                        
       method = "histodot") + 
     coord_cartesian(xlim=c(0,100)) + 
     scale_y_continuous(NULL, breaks = NULL)

     girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
            )
          ) 
```

## 2) Interactive Data Visualization with **plotly**

There are two ways to create interactive graph through plotly:

1.  plot_ly()

2.  ggploty()

### 2.1) Create interactive scatter plot with **plot_ly() method**

In the below output, the interactive graph is created through [plot\_ ly()]{.underline}.

#### Output:

```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, y = ~ENGLISH)
```

### 2.2) Create interactive scatter plot with **plot_ly() method**

In the below output, the interactive graph is enhanced with the addition of RACE as a visual variable.

#### Output:

```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, y = ~ENGLISH, color = ~RACE)
```

### 2.3) Create interactive scatter plot with **ggplotly() method**

In the below output, the interactive graph is created through gg[plotly()]{.underline}.

#### Output:

*`Note: only 1 additional line required (Line 7)`*

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
     geom_point(size=1) +
    coord_cartesian(xlim=c(0,100), ylim=c(0,100))

ggplotly(p)
```

### 2.4) Coordinated multiple views with **plotly**

The coordinated linked graphs will be achieved in three steps:

1.  Use highlight_key() of plotly as a shared data

2.  Create two scatter plots through ggplot2 functions

3.  Subplot() of plotly package used to place them side by side

#### Output:

```{r}
d <- highlight_key(exam_data)

p1 <- ggplot(data=d, 
         aes(x = MATHS, y = ENGLISH)) +
      geom_point(size=1) +
      coord_cartesian(xlim=c(0,100), ylim=c(0,100))

p2 <- ggplot(data=d, 
         aes(x = MATHS, y = SCIENCE)) +
      geom_point(size=1) +
      coord_cartesian(xlim=c(0,100), ylim=c(0,100))

subplot(ggplotly(p1),
        ggplotly(p2))
```

*`Note to self: patchwork is not interactive in comparion but includes labelling`*

## 3) Interactive Data Visualization with **crosstalk** methods

It is an add-on to htmlwidgets package with cross-widget interactions.

### 3.1) Interactive Data Table: **DT package**

In the below output, the interactive data table is created through [DT package.]{.underline}

#### Output:

```{r}
DT::datatable(exam_data, class= "compact")
```

### 3.2) Linked brushing **crosstalk** method

In the below output, the interactive data table is created through [DT package.]{.underline}

#### Output:

```{r}
d <- highlight_key(exam_data) 

p <- ggplot(d, 
       aes(ENGLISH, MATHS)) + 
     geom_point(size=1) +
     coord_cartesian(xlim=c(0,100), ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)        
```


